--Invalid procedure in UMG 890
ALTER PROCEDURE {databaseOwner}{objectQualifier}BizModules_UPG_TagEnsure
	@PhotoId int,
	@UserId int,
	@BelongedTags nvarchar(500)
AS
	DECLARE @Offset int
	DECLARE @NextPosition int
	DECLARE @Tags nvarchar(500)
	DECLARE @Tag nvarchar(200)
	DECLARE @TagId int
	DECLARE @ModuleId int
	
	DECLARE @AddedTags nvarchar(500)
	select @AddedTags = ''

	select @ModuleId = A.ModuleId from {databaseOwner}{objectQualifier}BizModules_UPG_Photo P inner join {databaseOwner}{objectQualifier}UPG_vw_Album A on P.AlbumId=A.ItemId where P.ItemId = @PhotoId
	Set @Tags = ',' + @BelongedTags + ','
	if CharIndex('\,',@Tags) > 0
		select @Tags = replace(@Tags, '\,', 'SPACE')

	begin transaction
	Set NoCount ON
	--delete from {databaseOwner}{objectQualifier}BizModules_UPG_PhotoTag where PhotoId=@PhotoId

	select @Offset = CharIndex(',',@Tags)
	select @NextPosition = CharIndex(',',@Tags,@Offset + 1)

	while @NextPosition > 0
	begin
		set @Tag= SUBSTRING(@Tags,@Offset + 1,@NextPosition - @Offset - 1)
		if CharIndex('SPACE',@Tag) > 0
			select @Tag = replace(@Tag, 'SPACE' , ',')
		set @TagId = 0
		set @Tag = ltrim(rtrim(@Tag))		

		if len(@AddedTags) > 0
			select @AddedTags = @AddedTags + ','
		select @AddedTags = @AddedTags + '''' + @Tag + ''''
		
		select @TagId = ItemId from {databaseOwner}{objectQualifier}BizModules_UPG_Tag where ltrim(rtrim(Tag)) = @Tag
		if isnull(@TagId, 0) =0 
		begin
			insert {databaseOwner}{objectQualifier}BizModules_UPG_Tag (ModuleId, Tag, CreatedByUser,CreatedDate) values (@ModuleId, @Tag, @UserId,getdate())
			select @TagId =  SCOPE_IDENTITY()
		end 
		
		if not exists (select * from {databaseOwner}{objectQualifier}BizModules_UPG_PhotoTag where PhotoId = @PhotoId and TagId = @TagId)
			Insert into {databaseOwner}{objectQualifier}BizModules_UPG_PhotoTag (PhotoId,TagId) Values(@PhotoId,@TagId)
			
		select @Offset = @NextPosition
		select @NextPosition = CharIndex(',',@Tags,@Offset + 1)
	end
	
	--delete tags that were linked to current photo but not now
	DECLARE @SQLString NVARCHAR(2000)
	SET @SQLString = 'delete {databaseOwner}{objectQualifier}BizModules_UPG_PhotoTag where PhotoId = ' + cast(@PhotoId as varchar(10)) + ' and TagId in (select ItemId from {databaseOwner}{objectQualifier}BizModules_UPG_Tag where tag not in (' + @AddedTags + '))'
	EXECUTE sp_executesql @SQLString

	--delete tags not being used
	delete {databaseOwner}{objectQualifier}BizModules_UPG_Tag where not exists(select * from {databaseOwner}{objectQualifier}BizModules_UPG_PhotoTag where {databaseOwner}{objectQualifier}BizModules_UPG_PhotoTag.TagId = {databaseOwner}{objectQualifier}BizModules_UPG_Tag.ItemId)
	
	Set NoCount OFF
	if @@error=0
	begin
		commit transaction
	end
	else
	begin
		rollback transaction
	end

GO



--Forget to update UMGClassicNG description
Update {databaseOwner}{objectQualifier}BizModules_UPG_Presentation set Description='Our recommended choice for medium and large scale image and media galleries' where Name='UMGClassicNG'
GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'{databaseOwner}{objectQualifier}BizModules_UPG_AlbumGetByName') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}BizModules_UPG_AlbumGetByName
GO


--New procedure for FB integration
CREATE PROCEDURE {databaseOwner}{objectQualifier}BizModules_UPG_AlbumGetByName
	@ModuleId int,
	@Name Varchar(100)
AS

SELECT
	*
FROM {databaseOwner}{objectQualifier}UPG_vw_Album
WHERE
	ModuleId = @ModuleId And Title = @Name
GO

